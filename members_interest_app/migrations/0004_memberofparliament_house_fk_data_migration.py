# Generated by Django 4.1 on 2024-09-29 13:09

from django.db import migrations


class Migration(migrations.Migration):

    def construct_houses(apps, schema_editor):
        House = apps.get_model("members_interest_app", "House")

        unknown, _ = House.objects.get_or_create(name="Unknown")
        house_of_commons, _ = House.objects.get_or_create(name="House of Commons")
        house_of_lords, _ = House.objects.get_or_create(name="House of Lords")

    def reverse_construct_houses(apps, schema_editor):
        House = apps.get_model("members_interest_app", "House")

        # Try to get and delete the three House records created in the original migration
        House.objects.filter(name="Unknown").delete()
        House.objects.filter(name="House of Commons").delete()
        House.objects.filter(name="House of Lords").delete()

    def migrate_data(apps, schema_editor):
        MemberOfParliament = apps.get_model("members_interest_app", "MemberOfParliament")
        House = apps.get_model("members_interest_app", "House")

        members = MemberOfParliament.objects.all()
        unknown = House.objects.get(name="Unknown")
        house_of_commons = House.objects.get(name="House of Commons")
        house_of_lords = House.objects.get(name="House of Lords")   

        members_to_update = []
        # c_members = []
        # l_members = []
        # o_members = []

        for member in members:
            if member.house == "House of Commons":
                member.house_fk = house_of_commons
                # common_members.append(member)

            elif member.house == "House of Lords":
                member.house_fk = house_of_lords
                # l_members.append(member)

            else:
                member.house_fk = unknown
                # o_members.append
            
            members_to_update.append(member)
        
        MemberOfParliament.objects.bulk_update(members_to_update, ['house_fk'])


        
        # # check if there are records to update
        # if members_to_update:
        #     MemberOfParliament.objects.bulk_update(members_to_update, ['house_fk'])
        # else:
        #     raise ValueError(
        #         f"""No records were found to update. There might be something wrong
        #         with the migration logic or data.

        #         "members: {len(members)}

        #         Common members: {len(c_members)}
        #         Lords members: {len(l_members)}
        #         Other members: {len(o_members)}
        #         Houses: {House.objects.all()}

        #         """)

        # # house_fk starts as NULL for all records, so check if any are still NULL after the bulk update
        # house_fk_still_null = MemberOfParliament.objects.filter(house_fk__isnull=True)
        # if house_fk_still_null.exists():
        #     raise ValueError(
        #         """At least one members house_fk field is still null. That should not be the case.
        #         This indicates the migration didn't work"""
        #         )

    def reverse_migrate_data(apps, schema_editor):
        MemberOfParliament = apps.get_model("members_interest_app", "MemberOfParliament")
        House = apps.get_model("members_interest_app", "House")

        unknown = House.objects.get(name="Unknown")
        house_of_commons = House.objects.get(name="House of Commons")
        house_of_lords = House.objects.get(name="House of Lords")

        # Prepare to revert the `house_fk` field to the original `house` string values
        members = MemberOfParliament.objects.all()

        members_to_update = []
        for member in members:
            if member.house_fk == house_of_commons:
                member.house = "House of Commons"
            elif member.house_fk == house_of_lords:
                member.house = "House of Lords"
            elif member.house_fk == unknown:
                member.house = "Unknown"
            member.house_fk = None  # Set the ForeignKey field back to NULL
            members_to_update.append(member)

        if members_to_update:
            MemberOfParliament.objects.bulk_update(members_to_update, ['house', 'house_fk'])


    dependencies = [
        ('members_interest_app', '0003_memberofparliament_house_fk'),
    ]

    operations = [
        migrations.RunPython(construct_houses, reverse_construct_houses, atomic=True),
        migrations.RunPython(migrate_data, reverse_migrate_data, atomic=True)

    ]
